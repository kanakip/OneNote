Here are the different types of for loops in Java with examples:

1. Traditional For Loop
// Basic for loop
for (int i = 0; i < 5; i++) {
    System.out.println("Count: " + i);
}

// With multiple variables
for (int i = 0, j = 10; i < j; i++, j--) {
    System.out.println("i = " + i + ", j = " + j);
} 
2. Enhanced For Loop (For-Each)

// With Array
String[] fruits = {"Apple", "Banana", "Orange"};
for (String fruit : fruits) {
    System.out.println(fruit);
}
// With Collection
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
for (Integer num : numbers) {
    System.out.println(num);
}
 3. While Loop

int count = 0;
while (count < 5) {
    System.out.println(count);
    count++;
}
 4. Do-While Loop
 
int x = 0;
do {
    System.out.println(x);
    x++;
} while (x < 5);
 
5. Nested Loops
 
// Nested for loop
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        System.out.println("i = " + i + ", j = " + j);
    }
}
 6. Loop with Break and Continue
 
// Break example
for (int i = 0; i < 10; i++) {
    if (i == 5) break;
    System.out.println(i);
}
// Continue example
for (int i = 0; i < 5; i++) {
    if (i == 2) continue;
    System.out.println(i);
}
 7. Infinite Loop
 
// Infinite for loop
for (;;) {
    System.out.println("Infinite loop");
    break;  // Need break to stop
}
// Infinite while loop
while (true) {
    System.out.println("Infinite loop");
    break;  // Need break to stop
}
 
8. Stream forEach (Modern Java)
 
List<String> items = Arrays.asList("A", "B", "C");
// Using forEach
items.forEach(item -> System.out.println(item));
// Using method reference
items.forEach(System.out::println);
 
Common Use Cases
 
1. Array Iteration:
 
int[] numbers = {1, 2, 3, 4, 5};
// Traditional
for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
}
// Enhanced
for (int number : numbers) {
    System.out.println(number);
}
 
2. Collection Iteration:
 
List<String> list = new ArrayList<>();
list.add("One");
list.add("Two");
// Enhanced for
for (String item : list) {
    System.out.println(item);
}
// Iterator
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}
 
3. Matrix Operations:
 
int[][] matrix = {{1,2,3}, {4,5,6}, {7,8,9}};
// Using nested loops
for (int i = 0; i < matrix.length; i++) {
    for (int j = 0; j < matrix[i].length; j++) {
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}
// Using enhanced for
for (int[] row : matrix) {
    for (int cell : row) {
        System.out.print(cell + " ");
    }
    System.out.println();
}
 
Remember:
 
4. Choose the appropriate loop type based on your needs:
• Traditional for: When you need index control
• Enhanced for: For simple iteration
• While: When condition is important
• Do-while: When you need at least one execution
5. Performance considerations:
• Enhanced for loop is cleaner but doesn't provide index access
• Traditional for loop gives more control
• Stream forEach is good for functional programming
6. Best practices:
• Use enhanced for loop when possible
• Avoid infinite loops unless necessary
• Be careful with break/continue statements
• Consider using streams for modern Java applications

From <https://highlight-chat-frontend.vercel.app/> 


